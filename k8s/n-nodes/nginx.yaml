apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: nodes
  replicas: 1
  template:
    metadata:
      labels:
        app: nodes
        role: nginx
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
          - name: nginx-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: n-nodes-nginx-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: n-nodes-nginx-config
  namespace: default
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        #include       /etc/nginx/mime.types;
        #default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        #sendfile        on;
        #tcp_nopush     on;

        #keepalive_timeout  65;

        #gzip  on;

        #include /etc/nginx/conf.d/*.conf;

        #resolver kube-dns.kube-system.svc.cluster.local ipv6=off;
        upstream backend{
          #server eosio-0.nodes:8888;
          server 10.48.0.11:8888;
        }
        server {
          location / {
            # resolver 127.0.0.1:53 ipv6=off;
            # set $backend_upstream "http://eosio-0.nodes.default.svc.cluster.local:8888";
            # proxy_pass $backend_upstream;
            proxy_pass http://10.48.1.22:8888;
          }
        }
    }
